function mixtures = process_robo_data_set(parms)    
    load(parms.in_file);
    pose = robonaut.wrist_pose;
    finger_joints = robonaut.finger_joints;

    if parms.clustering.mode == 4
      % load the eigengrasps and compute a low dimensional representation
      % of finger configuration
      load(parms.eigengrasps_file);
      finger_joints = get_finger_configs(eigengrasps,finger_joints,3);
      pose = [pose; finger_joints];
    end
    
    if parms.subsampling.on
      % make sure there are enough samples
      if parms.subsampling.nsamples > size(pose,2)
        error('Not enough samples to perform desired subsampling');
      end
      
      % subsample the hand poses
      elems = randperm(size(pose,2));
      pose = pose(:,elems(1:parms.subsampling.nsamples));
    end  
     
    % make sure the desired training set size is not larger than the
    % available number of samples
    if parms.clustering.ntrain > size(pose,2)
      error(['Not enough samples to construct a training ', ... 
             'set of the desired size']);
    end
    
    % split pose into a training set and validation set
    [train_pts valid_pts] = split_data(pose,parms.clustering.ntrain);
  
    % make sure validation sets of the desired sizes can be constructed
    if (parms.clustering.nvalid1 + parms.clustering.nvalid2) ~= ...
          size(valid_pts,2)
      error(['Incorrect number of samples for constructing ', ...
             'validation sets of the desired sizes']);
    end

    % split valid_pts into two validation sets
    [valid1_pts valid2_pts] = split_data(valid_pts,parms.clustering.nvalid1);
  
    % perform the clustering algorithm
    switch parms.clustering.mode
      % position
      case 0         
        mixtures = gal_position(train_pts(1:3,:), ...
                                valid1_pts(1:3,:), ...
                                valid2_pts(1:3,:), ...
                                parms.clustering.nsteps, ...
                                parms.clustering.nattempts, ...
                                parms.clustering.max_clusters);
        
      % orientation
      case 1        
        mixtures = gal_orientation(train_pts(4:7,:), ...
                                   valid1_pts(4:7,:), ...
                                   valid2_pts(4:7,:), ...
                                   parms.clustering.nsteps, ...
                                   parms.clustering.nattempts, ...
                                   parms.clustering.max_clusters);
        
      % position and orientation
      case 2        
        mixtures = gal_composite(train_pts, ...
                                 valid1_pts, ...
                                 valid2_pts, ...
                                 parms.clustering.nsteps, ...
                                 parms.clustering.nattempts, ...
                                 parms.clustering.max_clusters);
   
      % brute force algorithm
      case 3
        mixtures = gal_brute_force(train_pts, ...
                                   valid1_pts, ...
                                   valid2_pts, ...
                                   parms.clustering.nsteps, ...
                                   parms.clustering.nattempts, ...
                                   parms.clustering.max_clusters); 
        
      % preshape algorithm
      case 4
        mixtures = gal_preshape(train_pts, ...
                                valid1_pts, ...
                                valid2_pts, ...
                                parms.clustering.nsteps, ...
                                parms.clustering.nattempts, ...
                                parms.clustering.max_clusters); 
end